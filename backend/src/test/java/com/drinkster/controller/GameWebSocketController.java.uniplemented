package com.drinkster.controller;

import com.drinkster.model.Challenge;
import com.drinkster.model.Game;
import com.drinkster.model.Player;
import com.drinkster.model.enums.Difficulty;
import com.drinkster.model.enums.Sex;
import com.drinkster.repository.ChallengeRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.messaging.converter.MappingJackson2MessageConverter;
import org.springframework.messaging.simp.stomp.StompFrameHandler;
import org.springframework.messaging.simp.stomp.StompHeaders;
import org.springframework.messaging.simp.stomp.StompSession;
import org.springframework.messaging.simp.stomp.StompSessionHandlerAdapter;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.web.socket.client.standard.StandardWebSocketClient;
import org.springframework.web.socket.messaging.WebSocketStompClient;
import org.springframework.web.socket.sockjs.client.SockJsClient;
import org.springframework.web.socket.sockjs.client.WebSocketTransport;

import java.lang.reflect.Type;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@ActiveProfiles("test")
class GameWebSocketControllerIT {

    @LocalServerPort
    private int port;

    @Autowired
    private ChallengeRepository challengeRepository;

    @Autowired
    private ObjectMapper objectMapper;

    private WebSocketStompClient stompClient;
    private String wsUrl;
    private StompSession stompSession;

    @BeforeEach
    void setUp() throws ExecutionException, InterruptedException, TimeoutException {
        // Configurar cliente WebSocket
        this.wsUrl = "ws://localhost:" + port + "/game-ws";
        this.stompClient = new WebSocketStompClient(new SockJsClient(
                List.of(new WebSocketTransport(new StandardWebSocketClient()))));
        this.stompClient.setMessageConverter(new MappingJackson2MessageConverter());

        // Conectar ao WebSocket
        this.stompSession = stompClient.connect(wsUrl, new StompSessionHandlerAdapter() {}).get(1, TimeUnit.SECONDS);

        // Preparar dados para teste
        Challenge challenge = new Challenge(
                "Desafio para teste de WebSocket",
                Difficulty.MEDIUM,
                List.of(Sex.ALL),
                0,
                5
        );
        challengeRepository.save(challenge);
    }

    @Test
    void whenPlayerJoinsGame_thenBroadcastToSubscribers() throws Exception {
        // Preparar para receber mensagens
        CompletableFuture<Game> completableFuture = new CompletableFuture<>();

        // Inscrever-se no tópico de atualizações do jogo
        stompSession.subscribe("/topic/game/123", new StompFrameHandler() {
            @Override
            public Type getPayloadType(StompHeaders headers) {
                return Game.class;
            }

            @Override
            public void handleFrame(StompHeaders headers, Object payload) {
                completableFuture.complete((Game) payload);
            }
        });

        // Enviar mensagem para adicionar jogador
        Player player = new Player("Jogador1", Sex.MALE);
        stompSession.send("/app/game/123/join", player);

        // Verificar resposta
        Game game = completableFuture.get(5, TimeUnit.SECONDS);
        assertThat(game).isNotNull();
        assertThat(game.getPlayers()).contains(player);
    }
}