package com.drinkster.controller;

import com.drinkster.model.Challenge;
import com.drinkster.model.enums.Difficulty;
import com.drinkster.model.enums.Sex;
import com.drinkster.repository.ChallengeRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;

import static org.hamcrest.Matchers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
class ChallengeControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ChallengeRepository challengeRepository;

    @Autowired
    private ObjectMapper objectMapper;

    private Challenge challenge;

    @BeforeEach
    void setUp() {
        challenge = new Challenge(
                "API Test Challenge",
                Difficulty.HARD,
                List.of(Sex.ALL),
                0,
                10
        );

        challengeRepository.save(challenge);
    }

    @AfterEach
    void tearDown() {
        challengeRepository.deleteAll();
    }

    @Test
    void whenGetAllChallenges_thenStatus200AndJsonArray() throws Exception {
        mockMvc.perform(get("/api/challenges"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$", hasSize(greaterThanOrEqualTo(1))))
                .andExpect(jsonPath("$[0].text", is("API Test Challenge")));
    }

    @Test
    void whenGetChallengeById_thenStatus200AndJsonObject() throws Exception {
        mockMvc.perform(get("/api/challenges/{id}", challenge.getId()))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.text", is("API Test Challenge")))
                .andExpect(jsonPath("$.difficulty", is("HARD")));
    }

    @Test
    void whenCreateChallenge_thenStatus201AndReturnCreated() throws Exception {
        Challenge newChallenge = new Challenge(
                "New API Test Challenge",
                Difficulty.EASY,
                List.of(Sex.FEMALE),
                1,
                3
        );

        mockMvc.perform(post("/api/challenges")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(newChallenge)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.text", is("New API Test Challenge")))
                .andExpect(jsonPath("$.difficulty", is("EASY")));
    }
}